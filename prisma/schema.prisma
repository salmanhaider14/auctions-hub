
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid()) @map("_id")
  email    String   @unique
  name     String
  clerkUserId String @unique()
  auctions Auction[]
  bids     Bid[]
  ownedAuctions UserOwnedAuction[]
  watchlist   WatchlistItem[]
}

model Auction {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String
  startingPrice Float
  reservePrice Float
  endDate     DateTime
  userId String
  user        User?     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  bids        Bid[]
  isEnded        Boolean   @default(false)  
  isEmailSent    Boolean?  @default(false) 
  purchased  Boolean?      @default(false)
  images String[]
  userOwnedAuctions UserOwnedAuction[]
  watchlistItems WatchlistItem[]
}

model Bid {
  id        String   @id @default(cuid()) @map("_id")
  amount    Float
  auctionId String
  userId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  createdAt DateTime @default(now())
}
model UserOwnedAuction {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  auctionId  String
  user       User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model WatchlistItem {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  auctionId  String
  user       User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}